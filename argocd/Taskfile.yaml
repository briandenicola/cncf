version: '3'

env: 
  TITLE: A ArgoCD demo environment
  DEFAULT_REGION: canadaeast
tasks:
  default:
    cmds: 
    - task --list 

  up:
    desc: Creates {{.TITLE}}
    cmds:
    - terraform -chdir=./infrastructure workspace new {{.REGION}} || true
    - terraform -chdir=./infrastructure workspace select {{.REGION}}
    - terraform -chdir=./infrastructure init
    - task: apply
    - task: deploy
    vars:
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  apply:
    desc: Applies Terraform code
    cmds:
    - terraform -chdir=./infrastructure apply -auto-approve -var "region={{.REGION}}"  -var "tags={{.TITLE}}" 
    - task: creds
    vars:
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  creds:
    desc: Gets credential file for newly created AKS cluster
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - kubelogin convert-kubeconfig -l azurecli
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform -chdir=./infrastructure output -raw AKS_CLUSTER_NAME

  deploy:
    desc: Deploys sample guessbook application to cluster 
    cmds:
    - task: login
    - argocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --server localhost:8080 --insecure --dest-server https://kubernetes.default.svc --dest-namespace default --upsert --directory-recurse

  login:
    desc: Log into ArgoCD 
    cmds:
      - cmd: bold=$(tput bold); normal=$(tput sgr0); echo "Â»Â»Â»Â»ðŸ’¡Argo CD ${bold}admin${normal} password is ${bold}{{.ADMIN_PASSWORD}}${normal}"
        silent: true
      - cmd: argocd login localhost:8080 --username admin --password {{.ADMIN_PASSWORD}} --insecure
        silent: true
    vars:
      ADMIN_PASSWORD: 
        sh: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

  port-forward:
    desc: Poirt Forward ArgoCD Admin service
    cmds:
    - kubectl port-forward svc/argo-cd-repo-argocd-server -n argocd 8080:443

  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
    - az group list --tag Application="{{.TITLE}}" --query "[].name" -o tsv | xargs -ot -n 1 az group delete -y --verbose --no-wait -n || true
    - rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info || true