version: '3'
  
tasks:
  up:
    desc: Creates Azure infrastructure and deploys application code
    cmds:
    - terraform -chdir=./infrastructure init
    - terraform -chdir=./infrastructure apply -auto-approve
    - task: creds
    - task: deploy

  creds:
    desc: Gets credential file for newly created AKS cluster
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - kubelogin convert-kubeconfig -l azurecli
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform -chdir=./infrastructure output -raw AKS_CLUSTER_NAME

  deploy:
      desc: Deploys Backstage via Helm
      cmds:
      - helm upgrade -i backstage --set APP_NAME={{.APP_NAME}} --set ARM_WORKLOAD_APP_ID={{.ARM_WORKLOAD_APP_ID}} --set ARM_TENANT_ID={{.ARM_TENANT_ID}} --set KEYVAULT_NAME={{.KEYVAULT_NAME}} --set POSTGRES_SERVICE_HOST={{.POSTGRES_SERVICE_HOST}} ./chart
      vars:
        APP_NAME:
          sh: terraform -chdir=./infrastructure output -raw APP_NAME
        ARM_WORKLOAD_APP_ID:
          sh: terraform -chdir=./infrastructure output -raw ARM_WORKLOAD_APP_ID
        ARM_TENANT_ID:
          sh: terraform -chdir=./infrastructure output -raw ARM_TENANT_ID
        KEYVAULT_NAME:
          sh: terraform -chdir=./infrastructure output -raw KEYVAULT_NAME
        POSTGRES_SERVICE_HOST:
          sh: terraform -chdir=./infrastructure output -raw POSTGRES_SERVICE_HOST

  down:
    desc: Destorys Azure infrastructure and cleans up terraform state files
    cmds:
    - cd infrastructure ;
      rm -rf .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info
    - az group delete -n {{.RG}} --yes || true
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP