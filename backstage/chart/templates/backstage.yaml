apiVersion: v1
kind: Namespace
metadata:
  name:  {{ .Values.NAMESPACE }}
---
 apiVersion: v1
 kind: ServiceAccount
 metadata:
   name: {{ print .Values.APP_NAME "-backstage-identity" }}
   namespace: {{ .Values.NAMESPACE }}
   annotations:
     azure.workload.identity/client-id: {{ .Values.ARM_WORKLOAD_APP_ID }}
     azure.workload.identity/tenant-id: {{ .Values.ARM_TENANT_ID }}
   labels:
     azure.workload.identity/use: "true"
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: postgre-user-secrets-provider
  namespace: {{ .Values.NAMESPACE }}
spec:
  provider: azure
  secretObjects:                              
  - data: 
    - key: postgres-user
      objectName: postgres-user                           
    secretName: postgres-user                  
    type: Opaque 
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false"          
    clientID: {{ .Values.ARM_WORKLOAD_APP_ID }}
    keyvaultName: {{ .Values.KEYVAULT_NAME }}
    cloudName: ""
    objects:  |
      array:
        - |
          objectName: postgres-user
          objectType: secret              # object types: secret, key, or cert
          objectVersion: ""               # [OPTIONAL] object versions, default to latest if empty
    tenantId: {{ .Values.ARM_TENANT_ID }}      
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: backstage-secrets-provider
  namespace: {{ .Values.NAMESPACE }}
spec:
  provider: azure
  secretObjects:                              
  - data: 
    - key: password
      objectName: password                           
    secretName: postgres-password                  
    type: Opaque 
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false"          
    clientID: {{ .Values.ARM_WORKLOAD_APP_ID }}
    keyvaultName: {{ .Values.KEYVAULT_NAME }}
    cloudName: ""
    objects:  |
      array:
        - |
          objectName: postgres-password
          objectType: secret              # object types: secret, key, or cert
          objectVersion: ""               # [OPTIONAL] object versions, default to latest if empty
    tenantId: {{ .Values.ARM_TENANT_ID }}  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: {{ .Values.NAMESPACE }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: {{ print .Values.APP_NAME "-backstage-identity" }}
      containers:
        - name: backstage
          image: backstage:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 7007
          readinessProbe:
            httpGet:
              port: 7007
              path: /healthcheck
          livenessProbe:
            httpGet:
              port: 7007
              path: /healthcheck
          resources:
            limits:
              memory: "2048Mi"
              cpu: "4"
            requests:
              memory: "512Mi"
              cpu: "2"
          env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: postgres-user
                key: user
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-password 
                key: password
          - name: POSTGRES_SERVICE_HOST
            value:  {{ .Values.POSTGRES_SERVICE_HOST }}
          - name: POSTGRES_SERVICE_PORT
            value: 5432
      # volumes:
      # - name: postgres-user-volume
      #   csi:
      #     driver: secrets-store.csi.k8s.io
      #     readOnly: true
      #     volumeAttributes:
      #       secretProviderClass: "postgre-user-secrets-provider"
      # - name: postgres-password-volume
      #   csi:
      #     driver: secrets-store.csi.k8s.io
      #     readOnly: true
      #     volumeAttributes:
      #       secretProviderClass: "postgre-password-secrets-provider"
---
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: {{ .Values.NAMESPACE }}
spec:
  selector:
    app: backstage
  ports:
    - name: http
      port: 80
      targetPort: http